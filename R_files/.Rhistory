install.packages(swirl)
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
x-3
y<-x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
sqrt(Z-1)
sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10,100)
z*2+100
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by = 0.5)
my_seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times =10)
rep(c(0, 1, 2), each =10)
clc
A <- factor(c("big", "big","small","big"))
print(A)
table(A)
unclass(A)
M <- matrix(1:6, ncol=2, nrow =3)
M
M[1]
M[2]
M[]
M[1:6]
M[2,]
M[2,2]
M[3,2]
M[,2]
colnames(M) <- c('C1', 'C2')
rownames(M) <- c('A', 'B','C')
M$r1
M[r1,]
M[C1,]
M[C,]
M[C]
M['C']
M
M$C1
M[A,C1]
M
M['A',]
M['B',]
M['C',]
M[,'C1']
M[,'C2']
M['A','C2']
data.frame(M)
M$A
M$C
Mdata <- data.frame(M)
Mdata
Mdata$C1
Mdata <- data.frame(M)
library(ggplot2)
qplot(C1, C2, data = Mdata)
x <- data.frame(foo = 1:4, bar = c("A","B","C","D"), thr= c(T,T,F,T))
print(x)
nrow(x)
ncol(x)
mrg
print(mpg)
names(mpg)
head(mpg)
tail(mpg)
names(X)
names(X)x
names(x)
str(x)
x$foo
x$bar
x[2,1]
x[2,2]
x[2,]
x[2,'bar']
x$bar
x$foo
dim(x)
nrow(x)
dim(mpg)
? mpg
str(mpg)
typeof(1)
typeof(1.2)
summary(mpg)
summary(x)
summary(M)
qplot(displ, drv)
qplot(displ, drv, data =mpg)
qplot(displ,  data =mpg)
list(myvector = 1:5, mymatrix = M, mydata = x)
mylist <- list(myvector = 1:5, mymatrix = M, mydata = x)
mylist
summary(mylist)
mylist$myvector
mylist$myvector[1]
mylist$mymatrix[2,]
mylist$mydata$foo
mylist$mydata$bar
Sys.time()
production <- read.table("http://www.stat.tamu.edu/~sheather/book/docs/datasets/production.txt",
header=T,
sep="")
plot(RunTime ~ RunSize)
production
plot(production$RunTime ~ production$RunSize)
plot(production$RunTime , production$RunSize)
plot(production$RunTime ~ production$RunSize)
plot(production$RunTime , production$RunSize)
plot(production$RunTime ~ production$RunSize)
production.lm <- lm(RunTime ~ RunSize ,
data=production)
summary(production.lm)
anova(production.lm)
pred_production <- predict(production.lm , interval="confidence")
pred_production
plot(production$RunSize, pred_production$fit)
plot(production$RunSize, pred_production[1,])
plot(production$RunSize, pred_production[,1])
# examples
# examples
x <- list(a = c(1,2,3,4), b = rnorm (10))
x
lapply(x, mean)
lapply(x, length)
y <- list( A = runif(1,0,1), B = runif(2,0,2), C = runif(3,0,3))
y
lapply(y, function(Z) Z[length(Z)])
xmean <- lapply(x, mean)
class(xmean)
lapply(y, function(N) max(N)/2)
lapply(y, function(N) max(N)/min(N))
x$a
x$a[3] = NaN
x$a
xmean <- lapply(x, mean)
xmean
lapply(x, mean, na.rm = TRUE)
lapply(x, mean)
is.nan(Na)
is.nan(NA)
is.na(NaN)
T <- list(1,2,3,4)
Q <- lapply(T, runif, min = 0, max = 10 )
Q
Q$1
Q$[1]
Q[1]
sapply(y, function(Z) Z[length(Z)])
A<-sapply(y, function(Z) Z[length(Z)])
class(A)
is.vector(A)
sapply(y, function(Z) Z[c(1,length(Z))])
lapply(1:3/3,round, digit=3)
round(1/3, digit=2)
sapply(1:3, function(x) x^2)
lapply(1:3, function(x) x^2)
sapply(1:3, function(x) x^2)
sapply(1:3, function(x) c(x^2 x^3)
sapply(1:3, function(x) c(x^2 x^3))
sapply(1:3, function(x) c(x^2, x^3))
sapply(1:3, function(x) c(x^2, x^3))
is.matrix(sapply(1:3, function(x) c(x^2, x^3)))
sapply(1:3, function(x) seq(1, length(3), by = 0.5))
sapply(1:3, function(x) seq(1, length(x), by = 0.5))
sapply(1:3, function(x) seq(1, length(x))
)
sapply(1:3, function(x) seq(1, x
)
)
sapply(1:3, function(x) seq(1, x, by = 0.5)
)
library(xlsx)
cameraData2 <- read.xlsx("./data/behavior.xlsx",sheetIndex=1,header=TRUE)
getwd()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. save computer info in a variable
computer <- Sys.info()["nodename"]
# 2. use control loop to set working directory
if(grepl(computer, "weitingdeAir")){
setwd("/Users/weitinglin/Dropbox/DataCoding/R_primers/R_files")
}else {
if(grepl(computer, "WLIN_PC")){
setwd("C:/Users/Wei-Ting/Dropbox/DataCoding/R_primers/R_files")
} else {
warning("Check computer information")
} # end if (x...
} # end if(grep...
rm(computer) # this variable will not be used anymore
# 3. to verify the current working directory is correctly set, run the code below
#    getwd()
getwd()
cameraData2 <- read.xlsx("./data/behavior.xlsx",sheetIndex=1,header=TRUE)
getwd()
1. save computer info in a variable
computer <- Sys.info()["nodename"]
if(grepl(computer, "weitingdeAir")){
setwd("/Users/weitinglin/Dropbox/DataCoding/R_primers/R_files")
}else {
if(grepl(computer, "WLIN_PC")){
setwd("C:/Users/Wei-Ting/Dropbox/DataCoding/R_primers/R_files")
} else {
warning("Check computer information")
} # end if (x...
} # end if(grep...
rm(computer) # this variable will not be used anymore
getwd()
cameraData2 <- read.xlsx("./data/behavior.xlsx",sheetIndex=1,header=TRUE)
behave<- read.xlsx("./data/behavior.xlsx",sheetIndex=1,header=TRUE)
behave
behave[,2:5]
data <- read.xlsx("./data/behavior.xlsx",sheetIndex=1,header=TRUE)
time <- data[,1]
behave <-data[,2:5]
class(time)
as.numeric(time)
format(time[1:5],"%H")
format(time[1:5],"%H %M ")
format(time[1:5],"%H%M ")
format(time[1:5],"%H")
as.numeric(format(time[1:5],"%H"))
t_observe <-as.numeric(format(time,"%H"))*60
t_observe
t_observe <-as.numeric(format(time,"%H"))*60 + as.numeric(format(time,"%M"))
t_observe
dateDownloaded <-date()
library(ggplot2)
qplot(t_observe, behave[,2])
qplot(t_observe, behave[,2]>0)
plot(t_observe, behave[,2]>0)
length([1,2])
length(c(1,2))
c(1,2)
library(MA_filter)
library("MA_filter")
source(MA_filter)
source("MA_filter")
source("MA_filter.R")
source("filter.ma.R")
filter.ma(c(1,2,3))
datain = behave[,1]
datain <- behave[,1]
datain
datain <- behave[,2]
datain
range<- c(-1,0)
min(range)
dataout<-matrix(NaN, 1, length(datain) + min(range))
dataout
as.vector(dataout)
source("filter.ma")
source("filter.ma.R")
filter.ma(behave[,2])
dim(behave)
filtered <- filter.ma(behave[,2])
length(filtered)
for (year in 2010:2015){
print(paste("The year is", year))
}
for(y in 2010:2016){
print(paste("the year is", y))
}
for(y in 2010:2016){
print(paste("the year is", y))
}
l.out <-length(datain) + min(range)
dataout<-matrix(NaN, 1, l.out)
l.out
dataout<-matrix(NaN, 1, length(datain))
dataout<-as.vector(dataout)
dataout
- min(range)
max(range)
endout <- length(datain) - max(range)
(range+i)
(range+1)
1 - min(range)
datain[(range+2)]
datain[(range+2)]
datain[(range+2)]
datain
weights <- weights/sum(weights)
weights = matrix(1, 1, length(range))
weights
weights <- weights/sum(weights)
weights
temp <- datain[(range+2)] * weights
temp
sum(temp)
sum(temp)
for(i in startout : endout){
dataout[i]  <- sum(datain[(range+2)] * weights)
}
startout <- 1 - min(range) # the starting point of output
endout <- length(datain) - max(range) # the end point of output
for(i in startout : endout){
dataout[i]  <- sum(datain[(range+2)] * weights)
}
filtered <- filter.ma(behave[,2])
filtered
datain
weights <- weights/sum(weights)
weights
dataout<-matrix(NaN, 1, length(datain))
dataout
dataout<-as.vector(dataout)
dataout
startout <- 1 - min(range)
startout
endout <- length(datain) - max(range)
endout
i=2
datain[(range+i)]
datain[(range+i)] * weights
sum(datain[(range+i)] * weights)
startout : endout
sum(datain[(range+i)] * weights)
}
dataout[i]  <- sum(datain[(range+i)] * weights)
dataout
filtered <- filter.ma(behave[,2])
filtered
source("filter.ma.R")
filtered <- filter.ma(behave[,2])
filtered
source("filter.ma.R")
filtered <- filter.ma(behave[,2])
filtered
plot(t_observe, filtered)
filtered <- filter.ma(behave[,2], range = -2:2)
plot(t_observe, filtered)
filtered <- filter.ma(behave[,2], range = -10:10)
plot(t_observe, filtered)
filtered <- filter.ma(behave[,2], range = -20:20)
plot(t_observe, filtered)
source("filter.ma.R")
filtered <- filter.ma(behave[,2], range = -30:30)
plot(t_observe, filtered)
filtered <- filter.ma(behave[,2], range = -10:10)
plot(t_observe, filtered)
source("filter.ma.R")
filtered <- filter.ma(behave[,2]>0, range = -10:10)
plot(t_observe, filtered)
filtered <- filter.ma(behave[,2]>0, range = -10:10)
plot(t_observe, filtered)
plot(t_observe, behave[,2]>0)
